#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable
-mode(compile).

compile_template() ->
    erlydtl:compile(<<"{% for row in rows %}<tr>{% for col in row %}
	<td>{{ col }}</td>{% endfor %}
</tr>{% endfor %}">>, histogram_tmpl).


histogram_columns(Histogram) ->
    Mean = proplists:get_value(arithmetic_mean, Histogram),
    Median = proplists:get_value(median, Histogram),
    Percentile = proplists:get_value(percentile, Histogram),
    StdDev = proplists:get_value(standard_deviation, Histogram),
    % [_, {95, P95}, {99, P99}, {999, P999}] = Percentile,
    [_, _, _, {95, P95}, {99, P99}, {999, P999}] = Percentile,
    lists:map(fun(N) -> trunc(N) / 1000 end, [Mean, StdDev, Median, P95, P99, P999]).

columns(ServerName, Histograms, ConnectionTimeouts) ->
    Columns = [
               list_to_binary(ServerName),
               histogram_columns(proplists:get_value(handshake_times, Histograms)),
               histogram_columns(proplists:get_value(message_latencies, Histograms)),
               ConnectionTimeouts],
    lists:flatten(Columns).

row_score(Row) ->
    [_ServerName,
     HSMean, HSStdDev, _HSMedian, _HSP95, _HSP99, _HSP999,
     MLMean, MLStdDev, _MLMedian, _MLP95, _MLP99, _MLP999,
     ConnectionTimeouts] = Row,
    {ConnectionTimeouts, HSMean, HSStdDev, MLMean, MLStdDev}.

connection_timeouts(Root) ->
    {ok, FH} = file:open(filename:join(Root, "counts.csv"), [read]),
    % toss the header
    io:get_line(FH, ""),
    Line = io:get_line(FH, ""),
    [_, _, _, Timeouts|_Rest] = string:tokens(Line, ","),
    list_to_integer(Timeouts).

main(Roots) ->
    code:add_paths([
                    "ebin",
                    "deps/erlydtl/ebin"
                    ]),

    compile_template(),

    Rows = lists:map(fun(Root) ->
                             HistogramFN = filename:join(Root, "histogram.config"),
                             case file:consult(HistogramFN) of
                                 {ok, [{ServerName, Histograms}]} ->
                                     ConnectionTimeouts = connection_timeouts(Root),
                                     columns(ServerName, Histograms, ConnectionTimeouts);
                                 {error, Reason} -> error({HistogramFN, Reason})
                             end
                     end, Roots),

    SortedRows = lists:sort(fun(X,Y) -> row_score(X) =< row_score(Y) end, Rows),

    Context = [{rows, SortedRows}],
    {ok, HTML} = histogram_tmpl:render(Context),

    io:format("~s~n", [HTML]).

